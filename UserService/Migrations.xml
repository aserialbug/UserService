<?xml version="1.0" encoding="utf-8"?>
<ArrayOfMigrationDefinition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <MigrationDefinition>
        <Order>0</Order>
        <Description>Initial tables creation</Description>
        <Body>CREATE TABLE users (
            id          uuid primary key,
            login       text,
            password    text
            );

            create table persons (
            id          uuid primary key,
            first_name  text,
            last_name   text,
            birthday    date,
            biography   text,
            city        text
            );

            CREATE TABLE domain_events (
            id          uuid primary key,
            sequence    serial,
            type        text,
            event       jsonb
            );
        </Body>
    </MigrationDefinition>
    <MigrationDefinition>
        <Order>1</Order>
        <Description>Posts tabe added</Description>
        <Body>
            create table posts (
            id          uuid primary key,
            author      uuid not null,
            created     timestamp not null,
            content    text
            );

            create index posts_author_btree_idx on posts using btree (author);
        </Body>
    </MigrationDefinition>
    <MigrationDefinition>
        <Order>2</Order>
        <Description>Friendship table and other added</Description>
        <Body>
            -- Create table
            create table friendships (
            friend_from uuid not null,
            friend_to uuid not null,
            created timestamp not null default now()
            );
            
            -- Create indexing function
            create function smaller_first(uuid, uuid) returns uuid[]
            immutable
            language plpgsql
            as
            $$
            BEGIN
            if $1 > $2 then
            return array [$2, $1];
            end if;
            return array [$1, $2];
            END
            $$;
            
            -- Create unique index - BTREE
            create unique index if not exists test_array_btree_idx
            on friendships using btree (smaller_first(friend_from, friend_to));
            
            -- Create search index - GIN
            create index if not exists test_array_gin_idx
            on friendships using gin (smaller_first(friend_from, friend_to));
        </Body>
    </MigrationDefinition>
</ArrayOfMigrationDefinition>